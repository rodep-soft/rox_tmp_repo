# robot_localization EKF configuration optimized for mecanum wheel robot
# Key optimizations:
# - 2D mode for ground robot
# - Higher frequency (50Hz) for better control responsiveness  
# - Reduced yaw process noise for more stable heading control
# - IMU config optimized for 2D operation (yaw only)
ekf_filter_node:
  ros__parameters:
    # The frequency, in Hz, at which the filter will output a position estimate
    frequency: 50.0
    
    # The period, in seconds, after which we consider a sensor to have timed out
    sensor_timeout: 0.05
    
    # If this is set to true, no 3D information will be used in your state estimate
    two_d_mode: true
    
    # Use this parameter to provide an offset to the transform generated by ekf_localization_node
    transform_time_offset: 0.0
    
    # Use this parameter to provide specify how long the tf listener should wait for a transform to become available
    transform_timeout: 0.0
    
    # If you're having trouble, try setting this to true, and then echo the /diagnostics_agg topic to see
    # if the node is unhappy with any of your data
    print_diagnostics: true
    
    # Debug settings
    debug: false
    debug_out_file: /tmp/ekf_debug.txt
    
    # Remove the sensor data that is subject to outliers, before running the ekf
    remove_gravitational_acceleration: true
    
    # REP-105 coordinate frames
    map_frame: map
    odom_frame: odom
    base_link_frame: base_link
    world_frame: odom
    
    # Sensor inputs
    # Wheel odometry from mecanum_wheel_controller
    odom0: /wheel/odom
    
    # IMU from BNO055 (raw data with hardware failure detection)
    imu0: /imu/data
    
    # Wheel odometry configuration:
    # We trust position and linear velocities from wheels, but not orientation (use IMU for that)
    # x, y, z, roll, pitch, yaw, vx, vy, vz, vroll, vpitch, vyaw, ax, ay, az
    odom0_config: [true,  true,  false,
                   false, false, false,
                   true,  true,  false,
                   false, false, false,
                   false, false, false]
    
    # For imu0 (raw BNO055 data) - Conservative settings:
    # - We don't trust position (x,y,z): false, false, false
    # - We trust yaw orientation but with low weight: false, false, true
    # - We don't trust linear velocities: false, false, false  
    # - We trust yaw angular velocity but with low weight: false, false, true
    # - We don't trust linear accelerations due to noise: false, false, false
    imu0_config: [false, false, false,
                  false, false, true,
                  false, false, false,
                  false, false, true,
                  false, false, false]
    
    # Remove gravitational acceleration
    odom0_remove_gravitational_acceleration: false
    imu0_remove_gravitational_acceleration: true
    
    # Queue sizes for buffering
    odom0_queue_size: 10
    imu0_queue_size: 5
    
    # Throttle frequencies
    odom0_throttle_frequency: 30.0
    imu0_throttle_frequency: 30.0
    
        # Rejection thresholds: Data with variance above this threshold will be rejected
    odom0_pose_rejection_threshold: 5.0
    odom0_twist_rejection_threshold: 1.0
    imu0_pose_rejection_threshold: 0.8
    imu0_twist_rejection_threshold: 0.8
    imu0_linear_acceleration_rejection_threshold: 0.8
    
    # Frame IDs
    imu0_nodelay: false
    
    # Differential mode
    odom0_differential: false
    imu0_differential: false
    
    # Relative mode
    odom0_relative: false
    imu0_relative: false
    
    # Use control input (we're not using it)
    use_control: false
    
    # Process noise covariance matrix. The values are ordered as x, y, z, roll, pitch, yaw, vx, vy, vz,
    # vroll, vpitch, vyaw, ax, ay, az. 
    process_noise_covariance: [0.05, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
                               0.0,  0.05, 0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
                               0.0,  0.0,  0.06, 0.0,  0.0,  0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.03, 0.0,  0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.03, 0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.01, 0.0,   0.0,   0.0,  0.0,  0.0,  0.0,   0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.025, 0.0,   0.0,  0.0,  0.0,  0.0,   0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.025, 0.0,  0.0,  0.0,  0.0,   0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.04, 0.0,  0.0,  0.0,   0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,  0.01, 0.0,  0.0,   0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,  0.0,  0.01, 0.0,   0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.005, 0.0,  0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.0,   0.01, 0.0,  0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.0,   0.0,  0.01, 0.0,
                               0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,  0.0,  0.0,  0.0,   0.0,  0.0,  0.015]
    
    # Initial state covariance matrix (all values must be same type - float)
    initial_estimate_covariance: [1e-9, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  1e-9, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  1e-9, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  1e-9, 0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  1e-9, 0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  1e-9, 0.0,  0.0,  0.0,  0.0,   0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1e-9, 0.0,  0.0,  0.0,   0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1e-9, 0.0,  0.0,   0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1e-9, 0.0,   0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  1e-9,  0.0,   0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   1e-9,  0.0,   0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   1e-9,  0.0,  0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,   1e-9, 0.0,  0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,   0.0,  1e-9, 0.0,
                                  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,  0.0,   0.0,   0.0,   0.0,  0.0,  1e-9]
